{"version":3,"file":"ngx-masonry.js","sources":["ng://ngx-masonry/lib/ngx-masonry.component.ts","ng://ngx-masonry/lib/ngx-masonry.directive.ts","ng://ngx-masonry/lib/ngx-masonry.module.ts","ng://ngx-masonry/public-api.ts","ng://ngx-masonry/ngx-masonry.ts"],"sourcesContent":["import {\n  Component,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\nlet masonryConstructor: any;\n\nimport { NgxMasonryOptions } from './ngx-masonry-options';\n\n@Component({\n  selector: '[ngx-masonry], ngx-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n})\nexport class NgxMasonryComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(@Inject(PLATFORM_ID) private platformId: any, private _element: ElementRef) {}\n\n  public masonryInstance: any;\n\n  // Inputs\n  @Input() public options: NgxMasonryOptions;\n  @Input() updateLayout = false;\n\n  // Outputs\n  @Output() layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n  ngOnInit() {\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) {\n      this.options = {};\n    }\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n    }\n\n    this.options['transitionDuration'] = '0s'\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this.masonryInstance = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this.masonryInstance.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this.masonryInstance.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.masonryInstance) {\n      this.masonryInstance.destroy();\n    }\n  }\n\n  public layout() {\n    setTimeout(() => {\n      this.masonryInstance.layout();\n    });\n  }\n\n  public reloadItems() {\n    setTimeout(() => {\n      this.masonryInstance.reloadItems();\n    });\n  }\n\n  // public add(element: HTMLElement, prepend: boolean = false) {\n  public add(element: HTMLElement) {\n    // Tell Masonry that a child element has been added\n    this.masonryInstance.appended(element);\n\n    // Check if first item\n    if (this.masonryInstance.items.length === 1) {\n      this.masonryInstance.layout();\n    }\n  }\n\n  public remove(element: HTMLElement) {\n    // Tell Masonry that a child element has been removed\n    this.masonryInstance.remove(element);\n\n    // Layout items\n    this.layout();\n  }\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, Renderer2, OnInit } from '@angular/core';\nimport { style, animate, AnimationBuilder } from '@angular/animations';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryAnimations } from './ngx-masonry-options';\n\n@Directive({\n  selector: '[ngxMasonryItem], ngxMasonryItem'\n})\nexport class NgxMasonryDirective implements OnInit, OnDestroy, AfterViewInit {\n  private images: Set<HTMLImageElement>;\n\n  private animations: NgxMasonryAnimations = {\n    show: [\n      style({opacity: 0}),\n      animate('400ms ease-in', style({opacity: 1})),\n    ],\n    hide: [\n      style({opacity: '*'}),\n      animate('400ms ease-in', style({opacity: 0})),\n    ]\n  }\n\n  constructor(\n    private builder: AnimationBuilder,\n    private element: ElementRef,\n    @Inject(forwardRef(() => NgxMasonryComponent)) private parent: NgxMasonryComponent,\n    private renderer: Renderer2,\n  ) {}\n\n  ngOnInit() {\n    if (this.parent.options.animations !== undefined) {\n      this.animations = this.parent.options.animations;\n    }\n  }\n\n  ngAfterViewInit() {\n    const images = this.element.nativeElement.getElementsByTagName('img');\n    this.renderer.setStyle(this.element.nativeElement, 'opacity', '0');\n    this.images = new Set(images);\n    if (images.length === 0) {\n      this.parent.add(this.element.nativeElement);\n    } else {\n      for (const imageRef of images) {\n        this.renderer.listen(imageRef, 'load', _ => {\n          this.imageLoaded(imageRef);\n        });\n        this.renderer.listen(imageRef, 'error', _ => {\n          this.imageLoaded(imageRef);\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.images.size === 0 && this.element.nativeElement.parentNode) {\n      this.playAnimation(false);\n      this.parent.remove(this.element.nativeElement);\n    }\n  }\n\n  private imageLoaded(image?: HTMLImageElement) {\n    this.images.delete(image);\n    if (this.images.size === 0) {\n      this.renderer.setStyle(this.element.nativeElement, 'opacity', '100');\n      this.parent.add(this.element.nativeElement);\n      this.playAnimation(true);\n    }\n  }\n\n  private playAnimation(show: boolean) {\n    const metadata = show ? this.animations.show : this.animations.hide;\n    if (metadata) {\n      const player = this.builder.build(metadata).create(this.element.nativeElement);\n      player.play();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxMasonryComponent, NgxMasonryDirective],\n  exports: [NgxMasonryComponent, NgxMasonryDirective]\n})\nexport class NgxMasonryModule {}\n","/*\n * Public API Surface of ngx-masonry\n */\n\nexport * from './lib/ngx-masonry.component';\nexport * from './lib/ngx-masonry.directive';\nexport * from './lib/ngx-masonry-options';\nexport * from './lib/ngx-masonry.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["require$$0"],"mappings":"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"}