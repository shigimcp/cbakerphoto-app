import masonryLayout from 'masonry-layout';
import { __decorate, __param, __values } from 'tslib';
import { EventEmitter, Inject, PLATFORM_ID, ElementRef, Input, Output, Component, forwardRef, Renderer2, Directive, NgModule } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { style, animate, AnimationBuilder } from '@angular/animations';

var masonryConstructor;
var NgxMasonryComponent = /** @class */ (function () {
    function NgxMasonryComponent(platformId, _element) {
        this.platformId = platformId;
        this._element = _element;
        this.updateLayout = false;
        // Outputs
        this.layoutComplete = new EventEmitter();
        this.removeComplete = new EventEmitter();
    }
    NgxMasonryComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {
            masonryConstructor = masonryLayout;
        }
        // Create masonry options object
        if (!this.options) {
            this.options = {};
        }
        // Set default itemSelector
        if (!this.options.itemSelector) {
            this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';
        }
        this.options['transitionDuration'] = '0s';
        if (isPlatformBrowser(this.platformId)) {
            // Initialize Masonry
            this.masonryInstance = new masonryConstructor(this._element.nativeElement, this.options);
            // Bind to events
            this.masonryInstance.on('layoutComplete', function (items) {
                _this.layoutComplete.emit(items);
            });
            this.masonryInstance.on('removeComplete', function (items) {
                _this.removeComplete.emit(items);
            });
        }
    };
    NgxMasonryComponent.prototype.ngOnChanges = function (changes) {
        // only update layout if it's not the first change
        if (changes.updateLayout) {
            if (!changes.updateLayout.firstChange) {
                this.layout();
            }
        }
    };
    NgxMasonryComponent.prototype.ngOnDestroy = function () {
        if (this.masonryInstance) {
            this.masonryInstance.destroy();
        }
    };
    NgxMasonryComponent.prototype.layout = function () {
        var _this = this;
        setTimeout(function () {
            _this.masonryInstance.layout();
        });
    };
    NgxMasonryComponent.prototype.reloadItems = function () {
        var _this = this;
        setTimeout(function () {
            _this.masonryInstance.reloadItems();
        });
    };
    // public add(element: HTMLElement, prepend: boolean = false) {
    NgxMasonryComponent.prototype.add = function (element) {
        // Tell Masonry that a child element has been added
        this.masonryInstance.appended(element);
        // Check if first item
        if (this.masonryInstance.items.length === 1) {
            this.masonryInstance.layout();
        }
    };
    NgxMasonryComponent.prototype.remove = function (element) {
        // Tell Masonry that a child element has been removed
        this.masonryInstance.remove(element);
        // Layout items
        this.layout();
    };
    NgxMasonryComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], NgxMasonryComponent.prototype, "options", void 0);
    __decorate([
        Input()
    ], NgxMasonryComponent.prototype, "updateLayout", void 0);
    __decorate([
        Output()
    ], NgxMasonryComponent.prototype, "layoutComplete", void 0);
    __decorate([
        Output()
    ], NgxMasonryComponent.prototype, "removeComplete", void 0);
    NgxMasonryComponent = __decorate([
        Component({
            selector: '[ngx-masonry], ngx-masonry',
            template: '<ng-content></ng-content>',
            styles: ["\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t"]
        }),
        __param(0, Inject(PLATFORM_ID))
    ], NgxMasonryComponent);
    return NgxMasonryComponent;
}());

var NgxMasonryDirective = /** @class */ (function () {
    function NgxMasonryDirective(builder, element, parent, renderer) {
        this.builder = builder;
        this.element = element;
        this.parent = parent;
        this.renderer = renderer;
        this.animations = {
            show: [
                style({ opacity: 0 }),
                animate('400ms ease-in', style({ opacity: 1 })),
            ],
            hide: [
                style({ opacity: '*' }),
                animate('400ms ease-in', style({ opacity: 0 })),
            ]
        };
    }
    NgxMasonryDirective.prototype.ngOnInit = function () {
        if (this.parent.options.animations !== undefined) {
            this.animations = this.parent.options.animations;
        }
    };
    NgxMasonryDirective.prototype.ngAfterViewInit = function () {
        var e_1, _a;
        var _this = this;
        var images = this.element.nativeElement.getElementsByTagName('img');
        this.renderer.setStyle(this.element.nativeElement, 'opacity', '0');
        this.images = new Set(images);
        if (images.length === 0) {
            this.parent.add(this.element.nativeElement);
        }
        else {
            var _loop_1 = function (imageRef) {
                this_1.renderer.listen(imageRef, 'load', function (_) {
                    _this.imageLoaded(imageRef);
                });
                this_1.renderer.listen(imageRef, 'error', function (_) {
                    _this.imageLoaded(imageRef);
                });
            };
            var this_1 = this;
            try {
                for (var images_1 = __values(images), images_1_1 = images_1.next(); !images_1_1.done; images_1_1 = images_1.next()) {
                    var imageRef = images_1_1.value;
                    _loop_1(imageRef);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (images_1_1 && !images_1_1.done && (_a = images_1.return)) _a.call(images_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    NgxMasonryDirective.prototype.ngOnDestroy = function () {
        if (this.images.size === 0 && this.element.nativeElement.parentNode) {
            this.playAnimation(false);
            this.parent.remove(this.element.nativeElement);
        }
    };
    NgxMasonryDirective.prototype.imageLoaded = function (image) {
        this.images.delete(image);
        if (this.images.size === 0) {
            this.renderer.setStyle(this.element.nativeElement, 'opacity', '100');
            this.parent.add(this.element.nativeElement);
            this.playAnimation(true);
        }
    };
    NgxMasonryDirective.prototype.playAnimation = function (show) {
        var metadata = show ? this.animations.show : this.animations.hide;
        if (metadata) {
            var player = this.builder.build(metadata).create(this.element.nativeElement);
            player.play();
        }
    };
    NgxMasonryDirective.ctorParameters = function () { return [
        { type: AnimationBuilder },
        { type: ElementRef },
        { type: NgxMasonryComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return NgxMasonryComponent; }),] }] },
        { type: Renderer2 }
    ]; };
    NgxMasonryDirective = __decorate([
        Directive({
            selector: '[ngxMasonryItem], ngxMasonryItem'
        }),
        __param(2, Inject(forwardRef(function () { return NgxMasonryComponent; })))
    ], NgxMasonryDirective);
    return NgxMasonryDirective;
}());

var NgxMasonryModule = /** @class */ (function () {
    function NgxMasonryModule() {
    }
    NgxMasonryModule = __decorate([
        NgModule({
            imports: [],
            declarations: [NgxMasonryComponent, NgxMasonryDirective],
            exports: [NgxMasonryComponent, NgxMasonryDirective]
        })
    ], NgxMasonryModule);
    return NgxMasonryModule;
}());

/*
 * Public API Surface of ngx-masonry
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxMasonryComponent, NgxMasonryDirective, NgxMasonryModule };
//# sourceMappingURL=ngx-masonry.js.map
