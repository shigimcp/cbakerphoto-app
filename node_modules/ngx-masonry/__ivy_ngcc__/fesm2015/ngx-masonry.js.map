{"version":3,"file":"ngx-masonry.js","sources":["ng:/ngx-masonry/lib/ngx-masonry.component.ts","ng:/ngx-masonry/lib/ngx-masonry.directive.ts","ng:/ngx-masonry/lib/ngx-masonry.module.ts","ng:/ngx-masonry/public-api.ts","ng:/ngx-masonry/ngx-masonry.ts"],"names":["require$$0"],"mappings":"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","sourcesContent":["import {\n  Component,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\ndeclare var require: any;\nlet masonryConstructor: any;\n\nimport { NgxMasonryOptions } from './ngx-masonry-options';\n\n@Component({\n  selector: '[ngx-masonry], ngx-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n})\nexport class NgxMasonryComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(@Inject(PLATFORM_ID) private platformId: any, private _element: ElementRef) {}\n\n  public masonryInstance: any;\n\n  // Inputs\n  @Input() public options: NgxMasonryOptions;\n  @Input() updateLayout = false;\n\n  // Outputs\n  @Output() layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n  ngOnInit() {\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) {\n      this.options = {};\n    }\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngxMasonryItem], ngxMasonryItem';\n    }\n\n    this.options['transitionDuration'] = '0s'\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this.masonryInstance = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this.masonryInstance.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this.masonryInstance.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.masonryInstance) {\n      this.masonryInstance.destroy();\n    }\n  }\n\n  public layout() {\n    setTimeout(() => {\n      this.masonryInstance.layout();\n    });\n  }\n\n  public reloadItems() {\n    setTimeout(() => {\n      this.masonryInstance.reloadItems();\n    });\n  }\n\n  // public add(element: HTMLElement, prepend: boolean = false) {\n  public add(element: HTMLElement) {\n    // Tell Masonry that a child element has been added\n    this.masonryInstance.appended(element);\n\n    // Check if first item\n    if (this.masonryInstance.items.length === 1) {\n      this.masonryInstance.layout();\n    }\n  }\n\n  public remove(element: HTMLElement) {\n    // Tell Masonry that a child element has been removed\n    this.masonryInstance.remove(element);\n\n    // Layout items\n    this.layout();\n  }\n}\n","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, Renderer2, OnInit } from '@angular/core';\nimport { style, animate, AnimationBuilder } from '@angular/animations';\n\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryAnimations } from './ngx-masonry-options';\n\n@Directive({\n  selector: '[ngxMasonryItem], ngxMasonryItem'\n})\nexport class NgxMasonryDirective implements OnInit, OnDestroy, AfterViewInit {\n  private images: Set<HTMLImageElement>;\n\n  private animations: NgxMasonryAnimations = {\n    show: [\n      style({opacity: 0}),\n      animate('400ms ease-in', style({opacity: 1})),\n    ],\n    hide: [\n      style({opacity: '*'}),\n      animate('400ms ease-in', style({opacity: 0})),\n    ]\n  }\n\n  constructor(\n    private builder: AnimationBuilder,\n    private element: ElementRef,\n    @Inject(forwardRef(() => NgxMasonryComponent)) private parent: NgxMasonryComponent,\n    private renderer: Renderer2,\n  ) {}\n\n  ngOnInit() {\n    if (this.parent.options.animations !== undefined) {\n      this.animations = this.parent.options.animations;\n    }\n  }\n\n  ngAfterViewInit() {\n    const images = this.element.nativeElement.getElementsByTagName('img');\n    this.renderer.setStyle(this.element.nativeElement, 'opacity', '0');\n    this.images = new Set(images);\n    if (images.length === 0) {\n      this.parent.add(this.element.nativeElement);\n    } else {\n      for (const imageRef of images) {\n        this.renderer.listen(imageRef, 'load', _ => {\n          this.imageLoaded(imageRef);\n        });\n        this.renderer.listen(imageRef, 'error', _ => {\n          this.imageLoaded(imageRef);\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.images.size === 0 && this.element.nativeElement.parentNode) {\n      this.playAnimation(false);\n      this.parent.remove(this.element.nativeElement);\n    }\n  }\n\n  private imageLoaded(image?: HTMLImageElement) {\n    this.images.delete(image);\n    if (this.images.size === 0) {\n      this.renderer.setStyle(this.element.nativeElement, 'opacity', '100');\n      this.parent.add(this.element.nativeElement);\n      this.playAnimation(true);\n    }\n  }\n\n  private playAnimation(show: boolean) {\n    const metadata = show ? this.animations.show : this.animations.hide;\n    if (metadata) {\n      const player = this.builder.build(metadata).create(this.element.nativeElement);\n      player.play();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgxMasonryComponent } from './ngx-masonry.component';\nimport { NgxMasonryDirective } from './ngx-masonry.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxMasonryComponent, NgxMasonryDirective],\n  exports: [NgxMasonryComponent, NgxMasonryDirective]\n})\nexport class NgxMasonryModule {}\n","/*\n * Public API Surface of ngx-masonry\n */\n\nexport * from './lib/ngx-masonry.component';\nexport * from './lib/ngx-masonry.directive';\nexport * from './lib/ngx-masonry-options';\nexport * from './lib/ngx-masonry.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}