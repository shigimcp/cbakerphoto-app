import { __decorate, __param, __values } from "tslib";
import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, Renderer2, OnInit } from '@angular/core';
import { style, animate, AnimationBuilder } from '@angular/animations';
import { NgxMasonryComponent } from './ngx-masonry.component';
var NgxMasonryDirective = /** @class */ (function () {
    function NgxMasonryDirective(builder, element, parent, renderer) {
        this.builder = builder;
        this.element = element;
        this.parent = parent;
        this.renderer = renderer;
        this.animations = {
            show: [
                style({ opacity: 0 }),
                animate('400ms ease-in', style({ opacity: 1 })),
            ],
            hide: [
                style({ opacity: '*' }),
                animate('400ms ease-in', style({ opacity: 0 })),
            ]
        };
    }
    NgxMasonryDirective.prototype.ngOnInit = function () {
        if (this.parent.options.animations !== undefined) {
            this.animations = this.parent.options.animations;
        }
    };
    NgxMasonryDirective.prototype.ngAfterViewInit = function () {
        var e_1, _a;
        var _this = this;
        var images = this.element.nativeElement.getElementsByTagName('img');
        this.renderer.setStyle(this.element.nativeElement, 'opacity', '0');
        this.images = new Set(images);
        if (images.length === 0) {
            this.parent.add(this.element.nativeElement);
        }
        else {
            var _loop_1 = function (imageRef) {
                this_1.renderer.listen(imageRef, 'load', function (_) {
                    _this.imageLoaded(imageRef);
                });
                this_1.renderer.listen(imageRef, 'error', function (_) {
                    _this.imageLoaded(imageRef);
                });
            };
            var this_1 = this;
            try {
                for (var images_1 = __values(images), images_1_1 = images_1.next(); !images_1_1.done; images_1_1 = images_1.next()) {
                    var imageRef = images_1_1.value;
                    _loop_1(imageRef);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (images_1_1 && !images_1_1.done && (_a = images_1.return)) _a.call(images_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    NgxMasonryDirective.prototype.ngOnDestroy = function () {
        if (this.images.size === 0 && this.element.nativeElement.parentNode) {
            this.playAnimation(false);
            this.parent.remove(this.element.nativeElement);
        }
    };
    NgxMasonryDirective.prototype.imageLoaded = function (image) {
        this.images.delete(image);
        if (this.images.size === 0) {
            this.renderer.setStyle(this.element.nativeElement, 'opacity', '100');
            this.parent.add(this.element.nativeElement);
            this.playAnimation(true);
        }
    };
    NgxMasonryDirective.prototype.playAnimation = function (show) {
        var metadata = show ? this.animations.show : this.animations.hide;
        if (metadata) {
            var player = this.builder.build(metadata).create(this.element.nativeElement);
            player.play();
        }
    };
    NgxMasonryDirective.ctorParameters = function () { return [
        { type: AnimationBuilder },
        { type: ElementRef },
        { type: NgxMasonryComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return NgxMasonryComponent; }),] }] },
        { type: Renderer2 }
    ]; };
    NgxMasonryDirective = __decorate([
        Directive({
            selector: '[ngxMasonryItem], ngxMasonryItem'
        }),
        __param(2, Inject(forwardRef(function () { return NgxMasonryComponent; })))
    ], NgxMasonryDirective);
    return NgxMasonryDirective;
}());
export { NgxMasonryDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hc29ucnkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hc29ucnkvIiwic291cmNlcyI6WyJsaWIvbmd4LW1hc29ucnkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2SCxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXZFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBTTlEO0lBY0UsNkJBQ1UsT0FBeUIsRUFDekIsT0FBbUIsRUFDNEIsTUFBMkIsRUFDMUUsUUFBbUI7UUFIbkIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDekIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUM0QixXQUFNLEdBQU4sTUFBTSxDQUFxQjtRQUMxRSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBZnJCLGVBQVUsR0FBeUI7WUFDekMsSUFBSSxFQUFFO2dCQUNKLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUMsQ0FBQztnQkFDbkIsT0FBTyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQzthQUM5QztZQUNELElBQUksRUFBRTtnQkFDSixLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFDLENBQUM7Z0JBQ3JCLE9BQU8sQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7YUFDOUM7U0FDRixDQUFBO0lBT0UsQ0FBQztJQUVKLHNDQUFRLEdBQVI7UUFDRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxD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akYsTUFBTSxTQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsbUJBQW1CLEVBQW5CLENBQW1CLENBQUM7Z0JBQzNCLFNBQVM7O0lBbEJsQixtQkFBbUI7UUFIL0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGtDQUFrQztTQUM3QyxDQUFDO1FBa0JHLFdBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsbUJBQW1CLEVBQW5CLENBQW1CLENBQUMsQ0FBQyxDQUFBO09BakJyQyxtQkFBbUIsQ0FvRS9CO0lBQUQsMEJBQUM7Q0FBQSxBQXBFRCxJQW9FQztTQXBFWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEluamVjdCwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBSZW5kZXJlcjIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgc3R5bGUsIGFuaW1hdGUsIEFuaW1hdGlvbkJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgTmd4TWFzb25yeUNvbXBvbmVudCB9IGZyb20gJy4vbmd4LW1hc29ucnkuY29tcG9uZW50JztcbmltcG9ydCB7IE5neE1hc29ucnlBbmltYXRpb25zIH0gZnJvbSAnLi9uZ3gtbWFzb25yeS1vcHRpb25zJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25neE1hc29ucnlJdGVtXSwgbmd4TWFzb25yeUl0ZW0nXG59KVxuZXhwb3J0IGNsYXNzIE5neE1hc29ucnlEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XG4gIHByaXZhdGUgaW1hZ2VzOiBTZXQ8SFRNTEltYWdlRWxlbWVudD47XG5cbiAgcHJpdmF0ZSBhbmltYXRpb25zOiBOZ3hNYXNvbnJ5QW5pbWF0aW9ucyA9IHtcbiAgICBzaG93OiBbXG4gICAgICBzdHlsZSh7b3BhY2l0eTogMH0pLFxuICAgICAgYW5pbWF0ZSgnNDAwbXMgZWFzZS1pbicsIHN0eWxlKHtvcGFjaXR5OiAxfSkpLFxuICAgIF0sXG4gICAgaGlkZTogW1xuICAgICAgc3R5bGUoe29wYWNpdHk6ICcqJ30pLFxuICAgICAgYW5pbWF0ZSgnNDAwbXMgZWFzZS1pbicsIHN0eWxlKHtvcGFjaXR5OiAwfSkpLFxuICAgIF1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYnVpbGRlcjogQW5pbWF0aW9uQnVpbGRlcixcbiAgICBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5neE1hc29ucnlDb21wb25lbnQpKSBwcml2YXRlIHBhcmVudDogTmd4TWFzb25yeUNvbXBvbmVudCxcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQub3B0aW9ucy5hbmltYXRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IHRoaXMucGFyZW50Lm9wdGlvbnMuYW5pbWF0aW9ucztcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgY29uc3QgaW1hZ2VzID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdvcGFjaXR5JywgJzAnKTtcbiAgICB0aGlzLmltYWdlcyA9IG5ldyBTZXQoaW1hZ2VzKTtcbiAgICBpZiAoaW1hZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5wYXJlbnQuYWRkKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCBpbWFnZVJlZiBvZiBpbWFnZXMpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4oaW1hZ2VSZWYsICdsb2FkJywgXyA9PiB7XG4gICAgICAgICAgdGhpcy5pbWFnZUxvYWRlZChpbWFnZVJlZik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihpbWFnZVJlZiwgJ2Vycm9yJywgXyA9PiB7XG4gICAgICAgICAgdGhpcy5pbWFnZUxvYWRlZChpbWFnZVJlZik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmltYWdlcy5zaXplID09PSAwICYmIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIHRoaXMucGxheUFuaW1hdGlvbihmYWxzZSk7XG4gICAgICB0aGlzLnBhcmVudC5yZW1vdmUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaW1hZ2VMb2FkZWQoaW1hZ2U/OiBIVE1MSW1hZ2VFbGVtZW50KSB7XG4gICAgdGhpcy5pbWFnZXMuZGVsZXRlKGltYWdlKTtcbiAgICBpZiAodGhpcy5pbWFnZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ29wYWNpdHknLCAnMTAwJyk7XG4gICAgICB0aGlzLnBhcmVudC5hZGQodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgdGhpcy5wbGF5QW5pbWF0aW9uKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcGxheUFuaW1hdGlvbihzaG93OiBib29sZWFuKSB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSBzaG93ID8gdGhpcy5hbmltYXRpb25zLnNob3cgOiB0aGlzLmFuaW1hdGlvbnMuaGlkZTtcbiAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgIGNvbnN0IHBsYXllciA9IHRoaXMuYnVpbGRlci5idWlsZChtZXRhZGF0YSkuY3JlYXRlKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcbiAgICAgIHBsYXllci5wbGF5KCk7XG4gICAgfVxuICB9XG59XG4iXX0=